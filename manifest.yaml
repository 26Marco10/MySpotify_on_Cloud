apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: wurstmeister/zookeeper:latest
          ports:
            - containerPort: 2181
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  ports:
    - port: 2181
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: wurstmeister/kafka:latest
          ports:
            - name: kafka-internal
              containerPort: 9093
            - name: kafka-external
              containerPort: 9092
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INSIDE://kafka:9093,OUTSIDE://kafka:9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
            - name: KAFKA_LISTENERS
              value: "INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INSIDE"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_CREATE_TOPICS
              value: "data:1:1"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  ports:
    - name: kafka-internal
      port: 9093
      targetPort: 9093
    - name: kafka-external
      port: 9092
      targetPort: 9092
  selector:
    app: kafka

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
        - name: logstash
          image: docker.elastic.co/logstash/logstash:8.13.4
          ports:
            - containerPort: 5959
          volumeMounts:
            - name: logstash-pipeline
              mountPath: /usr/share/logstash/pipeline/pipeline.conf
              subPath: pipeline.conf
            - name: logstash-config
              mountPath: /usr/share/logstash/config/logstash.yml
              subPath: logstash.yml
      volumes:
        - name: logstash-pipeline
          configMap:
            name: logstash-pipeline
        - name: logstash-config
          configMap:
            name: logstash-config
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
spec:
  ports:
    - port: 5959
  selector:
    app: logstash
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-pipeline
data:
  pipeline.conf: |
    input {
        tcp {
            port => 5959
            codec => json_lines
        }
    }

    filter {
        # Analizza il messaggio JSON in ingresso e estrai i campi separati
        json {
            source => "message"
            remove_field => ["message"]
        }

        # Rimuovi tutti i campi tranne quelli desiderati
        mutate {
            remove_field => ["@version", "host", "path", "tags", "type", "ecs","level","taskName","logger_name"]
        }
    }

    output {
        stdout { codec => rubydebug }
        # Qui puoi aggiungere ulteriori output come ad esempio l'invio a Elasticsearch
        kafka {
            bootstrap_servers => "kafka:9093"
            topic_id => "data"
            codec => json
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
data:
  logstash.yml: |
    pipeline:
      batch:
        size: 125
        delay: 50
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spark
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spark
  template:
    metadata:
      labels:
        app: spark
    spec:
      containers:
        - name: spark
          image: 26marco10/spark:latest
---
apiVersion: v1
kind: Service
metadata:
  name: spark
spec:
  ports:
    - port: 7077
  selector:
    app: spark
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elastic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elastic
  template:
    metadata:
      labels:
        app: elastic
    spec:
      containers:
        - name: elastic
          image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
          ports:
            - containerPort: 9200
          env:
            - name: discovery.type
              value: "single-node"
            - name: xpack.security.enabled
              value: "false"
            - name: xpack.security.enrollment.enabled
              value: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: elastic
spec:
  ports:
    - port: 9200
  selector:
    app: elastic
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
        - name: kibana
          image: docker.elastic.co/kibana/kibana:8.13.4
          ports:
            - containerPort: 5601
          env:
            - name: ELASTICSEARCH_HOSTS
              value: "http://elastic:9200"
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
spec:
  ports:
    - port: 5601
  selector:
    app: kibana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-spotify
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-spotify
  template:
    metadata:
      labels:
        app: my-spotify
    spec:
      containers:
        - name: my-spotify
          image: 26marco10/my-spotify:latest
          ports:
            - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: my-spotify
spec:
  ports:
    - port: 8000
  selector:
    app: my-spotify
